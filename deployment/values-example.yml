# Default values for Magicorn Deployment Chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
# Author: nops@magicorn.co
# v0.2.0

# Anything related to deployment object itself.
deployment:
  image:
    uri: __INSERTURIHERE__
    pullPolicy: IfNotPresent
    imagePullSecrets: []
    #command: 
    #  - /usr/bin/supervisord
    #args:
    #  - '-c'
    #  - 'supervisor.conf'
  env:
    - name: foo
      value: bar
  resources:
    requests:
      cpu: 250m
      memory: 1Gi
    limits:
      # we don't use CPU limits anymore.
      # suggested memory limit is the same as the request limit.
      memory: 1Gi
  liveness:
    httpGet:
      # port "one" must be equal to service port "one" below.
      port: one
      path: /healthz
    failureThreshold: 2
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
  readiness:
    httpGet:
      # port "one" must be equal to service port "one" below.
      port: one
      path: /healthz
    failureThreshold: 2
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  lifecycle:
    preStop:
      exec:
        command: ["/bin/bash", "-c", "sleep 60"]
  deregistrationTime: 60
  failSeconds: 600
  revisionHistory: 25
  nodeSelector: {}
    # eks.amazonaws.com/capacityType: ON_DEMAND
  tolerations: []
  affinity: {}

# Cluster-wide service object details.
service:
  enabled: true
  annotations: {}
  type: ClusterIP
  ports:
    one:
      # inner port is the port that is listening inside container.
      inner: 80
      # outer port is the port that is forwarding the port from to container. like "docker run -p 8080:80" means 8080 -> 80 inside.
      outer: 80
    # if you require a second or more port to be listening, insert below.
    two:
      inner: 443
      outer: 443

# External access to the service object above.
# By default, ingress traffic is forwarded to outer service port of "one".
ingress:
  enabled: true
  idleTimeout: 60
  scheme: internet-facing
  certificateArn: arn:aws:acm:eu-west-1:000000000000:certificate/d0cb0db0-0000-0000-0000-0dc0000e0e00
  sslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
  groupName: loadBalancerNameHere
  groupOrder: 100
  hosts:
    - host: hostname.example
      paths:
        - path: /
          pathType: Prefix

# this field is ignored if autoscaling is enabled.
replicaCount: 1
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 100
  targetCPUUtilizationPercentage: 40
  # targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 180
      selectPolicy: Max
      policies:
        - type: Pods
          value: 4
          periodSeconds: 15
    scaleDown:
      selectPolicy: Disabled
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15

# set true here if you have a configmap already deployed into the cluster, must reside inside the same namespace within the deployment.
configMap:
  enabled: false
  name: configMapName
  fileName: .env.prod
  mountPath: /var/www/html

prehooks:
  # set true here if your application has database migrations.
  dbMigrations:
    enabled: false
    command: 
      - /usr/local/bin/python
    args:
      - manage.py
      - migrate
      - '--noinput'
      
  # set true here if you have any other prerequisite rather than or in addition to database migrations.
  otherPrehooks:
    enabled: false
    command: 
      - /usr/local/bin/python
    args:
      - manage.py
      - some_action_here

security:
  # set true if you'd need k8s api permissions in your application.
  # basically, this is going to manage rbac access of your deployment.
  serviceAccount:
    # Specifies whether a service account should be created
    enabled: false
    # Annotations to add to the service account
    annotations: {}
    # cluster-wide or only within namespace
    clusterWideAccess: false
    # Resource access rules
    rules: []
    # - resources: ["configmaps", "events", "pods", "pods/attach", "pods/exec", "secrets", "services"]
    #   verbs: ["get", "list", "watch", "create", "patch", "update", "delete"]
    # - apiGroups: [""]
    #   resources: ["pods/exec"]
    #   verbs: ["create", "patch", "delete"]

  # set true if you'd like to utilize AWS security groups to gain granular network access control to your deployment.
  # security group must be managed outside helm/terraform.
  sgPolicy:
    enabled: false
    securityGroupId: sg-0123456789abcdef

  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000